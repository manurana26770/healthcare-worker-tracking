// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CARE_WORKER
  MANAGER 
  ADMIN
}

model User {
  id         String   @id @default(cuid())
  auth0Id    String?  @unique
  email      String   @unique
  name       String
  password   String?
  role       UserRole @default(CARE_WORKER)
  locationId String?  // Location-based access control
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  location   Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  shifts     Shift[]
  notes      Note[]

  @@map("users")
}

model Location {
  id        String   @id @default(cuid())
  name      String
  address   String
  latitude  Float
  longitude Float
  radius    Int      @default(2000) // 2km in meters
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users  User[]   // Location-based access control
  shifts Shift[]

  @@map("locations")
}

model Shift {
  id        String   @id @default(cuid())
  userId    String
  locationId String
  startTime DateTime @default(now())
  endTime   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  location   Location    @relation(fields: [locationId], references: [id], onDelete: Cascade)
  notes      Note[]
  timeEntries TimeEntry[]

  @@map("shifts")
}

model Note {
  id        String   @id @default(cuid())
  shiftId   String
  userId    String
  content   String
  type      String   @default("CLOCK_OUT") // CLOCK_IN, CLOCK_OUT
  createdAt DateTime @default(now())

  // Relations
  shift Shift @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model TimeEntry {
  id                String   @id @default(cuid())
  shiftId           String
  clockInTime       DateTime
  clockOutTime      DateTime?
  note              String?
  clockInLatitude   Float
  clockInLongitude  Float
  clockOutLatitude  Float?
  clockOutLongitude Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  shift Shift @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}
